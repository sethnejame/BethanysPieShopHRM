
<input type="date" value="@Date?.ToString(dateFormatString)"
       format-value="@dateFormatString" @onchange="OnDateChanged" />

<button class="btn btn-sm" @onclick="Revert">
    <i class="fas f-undo"></i>
</button>

@code {
    private string dateFormatString = "yyyy-MM-dd";
    private DateTime? origDate;

    [Parameter]
    public DateTime? Date { get; set; }

    [Parameter]
    public EventCallback<DateTime?> DateChanged { get; set; } // For two-way data binding, this property must be called "propertyName(Changed)" in order for the callback to work
    // In this case, the property this callback is for is "Date" - when the parent uses the @bind-Date syntax, Blazor will automatically look for a callback property called "DateChanged" and subscribe to it
    // So if the date changes from the child component, the prop will be updated in the parent component

    private async Task Revert()
    {
        if (Date != origDate)
        {
            Date = origDate;
            await DateChanged.InvokeAsync(origDate);
        }
    }

    public async Task OnDateChanged(ChangeEventArgs e)
    {
        var date = (string)e.Value;
        var newDate = DateTime.Parse(date);
        Date = newDate;
        await DateChanged.InvokeAsync(newDate);
    }

    protected override void OnInitialized()
    {
        origDate = Date;
    }
}

